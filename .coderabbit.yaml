language: ko-KR
tone_instructions: "1. 리뷰 시에는 변경 사항의 문제점이나 한계점을 구체적으로 짚어주고, \n 2. 왜 해당 부분이 비효율적이거나 권장되지 않는지 명확한 근거와 함께 설명해주세요. \n 3. 대안을 제시할 땐, 선택지를 제안하면서 각각의 장단점도 논리적으로 설명해주세요. \n 4. 단순 지적보다는 개선 방향에 집중하고, 학습적인 관점에서 이해를 돕는 코멘트를 남겨주세요. \n 5. 지나치게 딱딱하지 않되, 논리의 흐름이 분명하게 전달되도록 해주세요."

reviews:
  profile: chill
  request_changes_workflow: true
  high_level_summary: true
  changed_files_summary: false
  sequence_diagrams: false
  assess_linked_issues: true
  related_issues: false
  related_prs: false
  suggested_labels: false
  auto_apply_labels: false
  suggested_reviewers: false
  auto_assign_reviewers: false
  poem: true
  path_instructions:
    - path: frontend/** # 검토 필요
      instructions: |
        - 1. React(Typescript) 팀 코드 컨벤션 및 공식 스타일 가이드(Biome, React/TS best practices)를 우선적으로 반영하여, 가독성·안정성(Null/에러 처리)·테스트/유지보수 용이성·브라우저/접근성 이슈 등을 검토해주세요.
        - 2. 최신 React/TypeScript 트렌드, JSDoc·Storybook 등 문서화, 팀 스타일 통일성도 함께 확인해 주세요.
        - 3. 각 리뷰 포인트별로 문제점과 대안, 장단점을 논리적으로 제시하고, 필요한 경우 예시 코드도 추가해 주세요.
        - 4. 리뷰가 너무 많아서 피로감을 줄 수 있으니, 꼭 필요한 부분에 집중해주고, 나머지는 캡션으로 설명해주세요.
        - 5. 리뷰 남겨주는 부분은 해당 라인 범위의 코멘트에 작성해주세요.
    - path: backend/**
      instructions: | # 검토 필요
        - 1. 팀 및 공식 컨벤션, 가독성, 예외처리, 테스트/확장/유지보수성, 모듈화, API/DB/보안 설계 기준을 기반으로 리뷰해주세요.
        - 2. 최신 트렌드, 불필요한 로직, 클린코드, 리팩토링, 서비스/도메인 설계, 공통 예외 처리, 확장성도 함께 확인해주세요.
        - 3. 각 피드백은 문제점·대안·장단점을 짧고 논리적으로, 예시 코드가 있다면 간결히 포함해 주세요.
        - 4. 팀 내 스타일 통일성도 확인해주세요.
        - 5. 미작성한 테스트 코드 케이스가 있다면, 어떤 테스트가 필요한지 제안해주세요. (예: 컨트롤러는 인수 테스트, 나머지는 단위 테스트)
        - 6. 리뷰 남겨주는 부분은 해당 라인 범위의 코멘트에 작성해주세요.
  auto_review:
    enabled: false # 자동 리뷰
    auto_incremental_review: false # 코드 추가 push 할 때도 자동 리뷰

chat:
  auto_reply: true

knowledge_base:
  web_search:
    enabled: true
  code_guidelines:
    enabled: true
    filePatterns: # Coderabbit이 참조할 가이드라인 문서
      - docs/be-code-convention.md
      - docs/fe-code-convention.md
  learnings:
    scope: local
  issues:
    scope: local
  pull_requests:
    scope: local
